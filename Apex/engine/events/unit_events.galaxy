//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2022, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// LibapxUnitDeathCleanup
// =======================
// whenever unit is killed or is removed, must cleanup unit information:
// -> clean data: must remove unit's cache from the data table
//    (to conserve data table memory usage)
//    along with custom name/name color
// -> if unit has region waygate dialog attached, must anchor the waygate
//    dialog to position where unit died
bool LibapxUnitDeathCleanup(bool testConds, bool runActions) {
	int waygateDialog = FixedToInt( UnitGetCustomValue(EventUnit(), gv_LibapxUnitIndexWaygateDialog) );
	string rgnName;
	int i;

	// remove data table data (see unit.galaxy)
	LibapxUnitDataRemove(EventUnit());

	// if waygate dialog exists, anchor to position where unit died
	if( waygateDialog > 0 ) {
		rgnName = DataTableGetString(true, LibapxWAYGATEDIALOGREGDATATABLEIDENTIFIER + " " + IntToString(waygateDialog));
		// anchor dialog to position where unit died with a new unit
		UnitCreate(1, LibapxWaygateDialogAnchorUnit, c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()), 270.0);
		DataTableSetUnit(true, LibapxWAYGATEANCHORDATATABLEIDENTIFIER + " " + rgnName, UnitLastCreated());

		//ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity {0.1}"); // set opacity to hide
		// hide the beacons for all players
		for( i = 1; i < gv_LibapxMaxPlayers; i += 1 ) {
			ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetFilterPlayers " + IntToString(i));
		}
		UnitSetCustomValue(UnitLastCreated(), gv_LibapxUnitIndexWaygateAnchor, 1.0);

		DialogSetPositionRelativeToUnit(waygateDialog, UnitLastCreated(), "RefOverhead", -60, 0);
	}

	return true;
}
bool LibapxUnitAttacking(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_attack"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());	
	input = LibapxUnitGetValEvent(u, "attack");

	
    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitClicked(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_click"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());

	input = LibapxUnitGetValEvent(u, "click");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
    return true;
}
bool LibapxUnitHighlightOn(bool testConds, bool runActions) {   unit u = EventUnit(); 
    int owner = UnitGetOwner(u);
    int player = EventPlayer();
    string input;
    string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_highlightOn";    
    unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    input = LibapxUnitGetValEvent(u, "highlightOn");

    if(DataTableValueExists(true, eventID)){
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }


    DataTableValueRemove(true, "unitvar_Hover_" + IntToString(player));
    DataTableSetUnitGroup(true, "unitvar_Hover_" + IntToString(player) , g);
    return true;
}
bool LibapxUnitHighlightOff(bool testConds, bool runActions) {  unit u = EventUnit(); 
    int owner = UnitGetOwner(u);
    int player = EventPlayer();
    string input;
    string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_highlightOff";       
    unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());   
    input = LibapxUnitGetValEvent(u, "highlightOff");

    if(DataTableValueExists(true, eventID)){
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }

    DataTableValueRemove(true, "unitvar_Hover_" + IntToString(player));
    return true;
}
bool LibapxUnitAttacked(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_attacked"; 
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	
	input = LibapxUnitGetValEvent(u, "attacked");

    if(DataTableValueExists(true, eventID)){
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
    return true;
}

bool LibapxUnitDied(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_death"; 
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "death");

    if(DataTableValueExists(true, eventID)){
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
    return true;
}

bool LibapxUnitSelected(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_select"; 
	input = LibapxUnitGetValEvent(u, "select");

    if(DataTableValueExists(true, eventID)){
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }

    return true;
}
bool LibapxUnitUnselected(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_unselect"; 
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "unselect");

    if(DataTableValueExists(true, eventID)){
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
    return true;
}

bool LibapxUnitAcquire(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_acquire"; 
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "acquire");

    if(DataTableValueExists(true, eventID)){
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
    return true;
}

bool LibapxUnitIdle(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_idle"; 
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "idle");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
    return true;
}

bool LibapxUnitSetParse(bool testConds, bool runActions) {
    unit u = EventUnit(); 
    int owner = UnitGetOwner(u);
    string input;  
    unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(u);
    input = DataTableGetString(true, IntToString(UnitGetOwner(u)) + UnitGetType(u) + "_birth" );
    if(DataTableValueExists(true, IntToString(UnitGetOwner(u)) + UnitGetType(u) + "_birth")) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }

    //Just to avoid having to make too many triggers
    UnitSetState( EventUnit(), c_unitStateHighlightable, true );


    return true;
}

bool LibapxUnitMoved(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_move"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "move");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitMoveComplete(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_moveFinish"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "moveFinish");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitMoveCancel(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_moveCancel"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "moveCancel");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}

bool LibapxUnitAttackMove(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_attackmove"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "attackmove");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitAttackMoveComplete(bool testConds, bool runActions) {

	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_attackmoveFinish"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "attackmoveFinish");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitAttackMoveCancel(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_attackmoveCancel"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "attackmoveCancel");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}

bool LibapxUnitPatrolExecute(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_patrol"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "patrol");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitPatrolAll(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_patrolAllStages"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "patrolAllStages");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitPatrolCancel(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_patrolCancel"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "patrolCancel");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}

bool LibapxUnitHoldPos(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_hold"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "hold");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitHoldPosComplete(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_holdFinish"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "holdFinish");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitHoldPosCancel(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_holdCancel"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "holdCancel");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}

bool LibapxUnitScanMove(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_scanmove"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "scanmove");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitScanMoveComplete(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_scanmoveComplete"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "scanmoveComplete");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitScanMoveCancel(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_scanmoveCancel"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "scanmoveCancel");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}

bool LibapxUnitTurn(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_turn"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "turn");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitTurnComplete(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_turnFinish"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "turnFinish");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitTurnCancel(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_turnCancel"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "turnCancel");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}

bool LibapxUnitStop(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_stop"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "stop");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}

//Unit property change events eg. Life, Shields, Energy, etc
//Possibly split triggers into Increase/Decrease
bool LibapxUnitLifePropertyChanges(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_life"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "life");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitShieldsPropertyChanges(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_shields"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "shields");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitEnergyPropertyChanges(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_energy"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "energy");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitKillsChange(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_kill"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "kill");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitXPChange(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_exp"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "exp");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitHeightChange(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_height"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "height");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitLevelChange(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_level"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "level");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}
bool LibapxUnitCurrentSpeedChange(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;
	string eventID = FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_movement"; 	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	input = LibapxUnitGetValEvent(u, "movement");

    if(DataTableValueExists(true, eventID)) {
        LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
    }
	return true;
}

// Much more configurable triggers
bool LibapxUnitEffectUsed(bool testConds, bool runActions) {
	unit u = EventPlayerEffectUsedUnit(c_effectUnitCaster); 
	int owner = UnitGetOwner(u);
	string input;	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(u);
	string effect = EventPlayerEffectUsed();
	input = LibapxUnitGetValEvent(u, effect);

	if (DataTableValueExists(true, FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_" + effect)){
	LibapxChatParse(input, UnitGetOwner(u), g, gv_LibapxPlayer[owner].spawningCount);
	}
	return true;
}
bool LibapxUnitBehaviorWasChanged(bool testConds, bool runActions) {	
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	string behavior = EventUnitBehavior();
	int behaviorChange = EventUnitBehaviorChange();
	input = LibapxUnitGetValEvent(u, behavior + IntToString(behaviorChange));

	if (DataTableValueExists(true, FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_" + behavior + IntToString(behaviorChange))){
		LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
	}
	return true;
}
bool LibapxUnitAbilityWasUsed(bool testConds, bool runActions) {
	unit u = EventUnit(); 
	int owner = UnitGetOwner(u);
	string input;	
	unitgroup g = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
	string abilityCommand = AbilityCommandGetAbility(EventUnitAbility());
	string abilityIndex = IntToString(AbilityCommandGetCommand(EventUnitAbility()));
	int abilityStage = EventUnitAbilityStage();
	input = LibapxUnitGetValEvent(u, abilityCommand + abilityIndex + IntToString(abilityStage));
	
	if (DataTableValueExists(true, FixedToString(UnitGetCustomValue(u, gv_LibapxUnitIndexId), 0) + "_" + abilityCommand + abilityIndex + IntToString(abilityStage))){
		LibapxChatParse(input, UnitGetOwner(EventUnit()), g, gv_LibapxPlayer[owner].spawningCount);
	}
	return true;
}
